// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const verifier = artifacts.require("verifier")
const zokratesProof = require("../../zokrates/code/square/proof.json")

contract("verifier", (accounts) => {
  const account_one = accounts[0]
  const account_two = accounts[1]

  describe("Test verification with correct proof", function () {
    beforeEach(async function () {
      this.contract = await verifier.new({ from: account_two })
    })

    it("correct proof", async function () {
      var correctProof = {
        proof: {
          a: [
            "0x0a6443ebf4a43abb27aedfbfe85e15fcd8c584e8f98c365062718ec000b1bb87",
            "0x1846f9e106cf63a0cf6cf01cce48e834a4e54bf1c22e82cd92b7dd3fb80fd185",
          ],
          b: [
            [
              "0x069559dab516dcad73fc5281f8be6f51abdbbeef0a4d87852ea2d18a9dec70a6",
              "0x1bf8da35145352ad98ba3dff7930e4190764809da982165c017aa77c36412ebf",
            ],
            [
              "0x060438a7c56acd273cef29c850290a4b8f91dc9ea959a70c757d133713a2bc62",
              "0x144acd610553d714935a8067858f17a9107d282a7bba9e017c325b25895853ce",
            ],
          ],
          c: [
            "0x072c7ea4803653064fca84ddd93e78c03263ea1e973d577cb68b27f645156ad0",
            "0x1f9c85723c15888240e80b696b10271ce6175291de6d5cef516b39129037993e",
          ],
        },
        inputs: [
          "0x0000000000000000000000000000000000000000000000000000000000000004",
          "0x0000000000000000000000000000000000000000000000000000000000000002",
        ],
      }

      //   var correctProof = {
      //     proof: {
      //       a: [
      //         "0x0e30d55835290f2d9b230802af37cec64416bda12207a76f1e11e0b7556ab7a0",
      //         "0x2aeb07083e39008519f7306d98cec2552d65adc20b398691689f8ec2591d1331",
      //       ],
      //       b: [
      //         [
      //           "0x15f7e4d5081cf92fba6be210e260abba8d62ddbdb3a810736b6b930668e7b60a",
      //           "0x1833151a5e3592e1e5d9984e5823b42789f8b93bf570abdb12c8e3cf387d9ded",
      //         ],
      //         [
      //           "0x287391f15e5d1be86667cb59779093777681bb5203d6c873e34f4be9bbe10d9e",
      //           "0x0a96c1b9e6fc236e5dbe3a5209167adad551111e951b5ccd9a13b87d050eb086",
      //         ],
      //       ],
      //       c: [
      //         "0x128ffa85c7ac30e5228f6619837329de49ef3703a8543e57a96974a757216504",
      //         "0x0479edf8d9a97d34ed08e2a3f2ddadd99fddd2de256333ac0302245d7ff9e85b",
      //       ],
      //     },
      //     inputs: [
      //       "0x0000000000000000000000000000000000000000000000000000000000000004",
      //       "0x0000000000000000000000000000000000000000000000000000000000000002",
      //     ],
      //   }

      // in
      // var correctProof = {
      //   proof: {
      //     a: [
      //       "0x0e30d55835290f2d9b230802af37cec64416bda12207a76f1e11e0b7556ab7a0",
      //       "0x2aeb07083e39008519f7306d98cec2552d65adc20b398691689f8ec2591d1331",
      //     ],
      //     b: [
      //       // [
      //       //   "0x069559dab516dcad73fc5281f8be6f51abdbbeef0a4d87852ea2d18a9dec70a6",
      //       //   "0x1bf8da35145352ad98ba3dff7930e4190764809da982165c017aa77c36412ebf",
      //       // ],
      //       // [
      //       //   "0x15f7e4d5081cf92fba6be210e260abba8d62ddbdb3a810736b6b930668e7b60a",
      //       //   "0x1833151a5e3592e1e5d9984e5823b42789f8b93bf570abdb12c8e3cf387d9ded",
      //       // ],
      //       [
      //         "0x0000000000000000000000000000000000000000000000000000000000000004",
      //         "0x0000000000000000000000000000000000000000000000000000000000000002",
      //       ],
      //       // [
      //       //   "0x060438a7c56acd273cef29c850290a4b8f91dc9ea959a70c757d133713a2bc62",
      //       //   "0x144acd610553d714935a8067858f17a9107d282a7bba9e017c325b25895853ce",
      //       // ],
      //       // [
      //       //   "0x287391f15e5d1be86667cb59779093777681bb5203d6c873e34f4be9bbe10d9e",
      //       //   "0x0a96c1b9e6fc236e5dbe3a5209167adad551111e951b5ccd9a13b87d050eb086",
      //       // ],
      //       [
      //         "0x0000000000000000000000000000000000000000000000000000000000000004",
      //         "0x0000000000000000000000000000000000000000000000000000000000000002",
      //       ],
      //     ],
      //     c: [
      //       "0x128ffa85c7ac30e5228f6619837329de49ef3703a8543e57a96974a757216504",
      //       "0x0479edf8d9a97d34ed08e2a3f2ddadd99fddd2de256333ac0302245d7ff9e85b",
      //     ],
      //   },
      //   inputs: [
      //     "0x0000000000000000000000000000000000000000000000000000000000000004",
      //     "0x0000000000000000000000000000000000000000000000000000000000000002",
      //   ],
      // }

      let result = await this.contract.verifyTx.call(
        correctProof.proof.a,
        correctProof.proof.b,
        correctProof.proof.c,
        correctProof.inputs
      )

      assert.equal(result, false, "proof is valid")
    })
  })

  describe("Test verification with incorrect proof", function () {
    beforeEach(async function () {
      this.contract = await verifier.new({ from: account_two })
    })

    it("incorrect proof", async function () {
      var incorrectProof = {
        proof: {
          a: [
            "0x0a6443ebf4a43abb27aedfbfe85e15fcd8c584e8f98c365062718ec000b1bb87",
            "0x1846f9e106cf63a0cf6cf01cce48e834a4e54bf1c22e82cd92b7dd3fb80fd185",
          ],
          b: [
            [
              "0x069559dab516dcad73fc5281f8be6f51abdbbeef0a4d87852ea2d18a9dec70a6",
              "0x1bf8da35145352ad98ba3dff7930e4190764809da982165c017aa77c36412ebf",
            ],
            [
              "0x060438a7c56acd273cef29c850290a4b8f91dc9ea959a70c757d133713a2bc62",
              "0x144acd610553d714935a8067858f17a9107d282a7bba9e017c325b25895853ce",
            ],
          ],
          c: [
            "0x072c7ea4803653064fca84ddd93e78c03263ea1e973d577cb68b27f645156ad0",
            "0x1f9c85723c15888240e80b696b10271ce6175291de6d5cef516b39129037993e",
          ],
        },
        inputs: [
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0x0000000000000000000000000000000000000000000000000000000000000004",
        ],
      }

      let result = await this.contract.verifyTx.call(
        incorrectProof.proof.a,
        incorrectProof.proof.b,
        incorrectProof.proof.c,
        incorrectProof.inputs
      )

      assert.equal(result, false, "proof is invalied")
    })
  })
})
